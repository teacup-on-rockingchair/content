# platform = Red Hat Virtualization 4,multi_platform_fedora,multi_platform_ol,multi_platform_rhel,multi_platform_sle
# reboot = false
# strategy = configure
# complexity = low
# disruption = medium

{{{ ansible_instantiate_variables(FILE_PARAM_ARGUMENT) }}}

- name: "Set rsyslog logfile configuration facts"
  set_fact:
    rsyslog_etc_config: "/etc/rsyslog.conf"

# * And also the log file paths listed after rsyslog's $IncludeConfig directive
#   (store the result into array for the case there's shell glob used as value of IncludeConfig)
- name: "Get IncludeConfig directive"
  shell: |
    set -o pipefail
    grep -e '$IncludeConfig' {{ rsyslog_etc_config }} | cut -d ' ' -f 2 || true
  register: rsyslog_old_inc
  changed_when: False

- name: "Get include files directives"
  shell: |
    set -o pipefail
    grep -oP '^\s*include\s*\(\s*file.*' {{ rsyslog_etc_config }} |cut  -d"\"" -f 2 || true
  register: rsyslog_new_inc
  changed_when: False

- name: "Expand glob expressions"
  shell: |
    set -o pipefail
    eval printf '%s\\n' {{ item }}
  register: include_config_output
  loop: "{{ rsyslog_old_inc.stdout_lines + rsyslog_new_inc.stdout_lines }}"

- name: "List all config files"
  shell: find {{ item }} -not -path "*/.*" -type f
  loop: "{{ include_config_output.results|map(attribute='stdout_lines')|list|flatten }}"
  register: rsyslog_config_files
  failed_when: False
  changed_when: False

- name: "Extract log files"
  shell: |
    set -o pipefail
    grep -oP '^[^(\s|#|\$)]+[\s]+.*[\s]+-?(/+[^:;\s]+);*\.*$' {{ item }}  |awk '{print $NF}'|sed -e 's/^-//' || true
  loop: "{{ rsyslog_config_files.results|map(attribute='stdout_lines')|list|flatten|unique + [ rsyslog_etc_config ] }}"
  register: log_files
  changed_when: False

- name: "Setup log files permissions"
  ignore_errors: yes
  ansible.builtin.command:
    cmd: {{{ FILE_PARAM_CMD }}} {{ {{{ FILE_PARAM_ARGUMENT }}} }} "{{ item }}"
  loop: "{{ log_files.results|map(attribute='stdout_lines')|list|flatten|unique }}"
